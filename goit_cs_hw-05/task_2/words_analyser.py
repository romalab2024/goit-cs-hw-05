import asyncio
import aiohttp
import re
import collections
import concurrent.futures
import matplotlib.pyplot as plt
async def fetch_text(url: str) -> str:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–µ–∫—Å—Ç —ñ–∑ –∑–∞–¥–∞–Ω–æ—ó URL-–∞–¥—Ä–µ—Å–∏."""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.text()
def clean_text(text: str) -> list:
    """–û—á–∏—â—É—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó —Ç–∞ —Ä–æ–∑–±–∏–≤–∞—î –π–æ–≥–æ –Ω–∞ —Å–ª–æ–≤–∞."""
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ, –∫—Ä—ñ–º –ª—ñ—Ç–µ—Ä —Ç–∞ –ø—Ä–æ–±—ñ–ª—ñ–≤
    words = text.lower().split()  # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    return words
def map_reduce(words: list) -> collections.Counter:
    """–†–∞—Ö—É—î —á–∞—Å—Ç–æ—Ç—É —Å–ª—ñ–≤ (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–¥–∏–≥–º–∏ MapReduce)."""
    return collections.Counter(words)
async def process_text(words: list) -> collections.Counter:
    """–ó–∞–ø—É—Å–∫–∞—î MapReduce —É –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ."""
    loop = asyncio.get_running_loop()
    with concurrent.futures.ThreadPoolExecutor() as pool:
        result = await loop.run_in_executor(pool, map_reduce, words)
    return result
def visualize_top_words(counter: collections.Counter, top_n: int = 10):
    """–ë—É–¥—É—î –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è —Ç–æ–ø N –Ω–∞–π–±—ñ–ª—å—à –≤–∂–∏–≤–∞–Ω–∏—Ö —Å–ª—ñ–≤."""
    top_words = counter.most_common(top_n)
    words, counts = zip(*top_words)  # –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É –¥–≤–∞ –æ–∫—Ä–µ–º—ñ —Å–ø–∏—Å–∫–∏

    plt.figure(figsize=(10, 5))
    plt.barh(words[::-1], counts[::-1], color="skyblue")  # –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É
    plt.xlabel("–ß–∞—Å—Ç–æ—Ç–∞")
    plt.ylabel("–°–ª–æ–≤–∞")
    plt.title(f"–¢–æ–ø {top_n} –Ω–∞–π–±—ñ–ª—å—à –≤–∂–∏–≤–∞–Ω–∏—Ö —Å–ª—ñ–≤")
    plt.show()
async def main():
    url = "https://www.gutenberg.org/files/1342/1342-0.txt"  # "–ì–æ—Ä–¥—ñ—Å—Ç—å —ñ —É–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è" –î–∂–µ–π–Ω –û—Å—Ç—ñ–Ω
    
    print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É...")
    text = await fetch_text(url)

    print("üìù –û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É...")
    words = clean_text(text)

    print("üß† –û–±—Ä–æ–±–∫–∞ —Å–ª—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é MapReduce...")
    word_counts = await process_text(words)

    print("üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è...")
    visualize_top_words(word_counts)

if __name__ == "__main__":
    asyncio.run(main())
